
scenario: "coordination/simple_stag_hunt"

env_args:
    ###########################################
    #               Environment               #
    ###########################################
    done_callback: True     # Whether the scenario uses a done callback for terminal check
    logging_callback: True  # Whether the scenario has a logging callback for environment information
    num_obstacles: 0        # number of obstacles
    num_predators: 8        # number of predators, i.e., adversary agents
    num_prey: 8             # number of prey in the environment, i.e., good agents
    observe_state: False    # whether an observation is only partial (False) or central including agent position (True)
    observe_ids: False      # observe agent ID, instead of agent presence (only for state_as_list=False)
    observe_one_hot: False  # observe agent ID as one-hot vector (only for observer_ids=True)
    prey_rest: 0.0          # probability that a stag will not move (at each time step)
    state_as_graph: False   # whether the state is a list of entities (True) or the entire grid (False
    toroidal: False         # whether the world is bounded (False) or toroidal (True)
    world_shape: [10, 10]   # the shape of the grid-world [height, width]

    ###########################################
    #                 Reward                  #
    ###########################################
    miscapture_punishment: -2  # punishment if less than capture_action_conditions agents executes capture_action
    reward_stag: 10            # reward for capturing a stag
    reward_collision: 0        # reward (or punishment) for colliding with other agents
    reward_time: 0             # reward (or punishment) given at each time step

    ###########################################
    #                  Agent                  #
    ###########################################
    agent_obs: [2, 2]             # (radius-1) of the agent's observation, e.g., [0, 0] observes only one pixel
    agent_move_block: [0,1,2]     # by which entities is an agent's move blocked (0=agents, 1=prey, 2=obstacle)
    agent_share_space: False      # Whether agents can occupy the same space
    agent_share_qty: 2            # Number agents that can occupy the same space
    directed_observations: False  # Agents observe square around them (False) or a cone in the direction of the last action (True).
    directed_cone_narrow: True    # Whether the diagonal is excluded from the directed_observation cone (True)
    directed_extra_actions: True  # Whether the observation cone is controlled by movement (False) or actions (True)
    prey_move_block: [0,1,2]      # by which entities is an agent's move blocked (0=agents, 1=prey, 2=obstacle)

    ###########################################
    #                 Capture                 #
    ###########################################
    capture_action: True               # whether capturing requires an extra action (True) or just capture_conditions (False)
    capture_conditions: 0              # number of free fields available to prey to be captured
    capture_action_conditions: 2       # number of agents that have to simultaneously execute "catch" action
    capture_freezes: True              # whether capturing any prey freezes the participating agents (True) or not (False)
    capture_terminal: False            # whether capturing any prey ends the episode (i.e. only one prey can be caught)
    num_capture_actions: 2             # number of different capture actions, either 1 or
                                       # the same value as capture_action_conditions
    remove_frozen: True                # whether frozen agents are removed (True) or still present in the world (False)

    ###########################################
    #                  Debug                  #
    ###########################################
    print_caught_prey: False    # debug messages about caught prey and finished episodes
    print_frozen_agents: False  # debug messages about frozen agents after some prey has been caught
